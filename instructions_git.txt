――Git 安装&配置

Windows下要使用很多Linux/Unix的工具时，需要Cygwin这样的模拟环境，Git也一样。Cygwin的安装和配置都比较复杂，就不建议你折腾了。不过，有高人已经把模拟环境和Git都打包好了，名叫msysgit，只需要下载一个单独的exe安装程序，其他什么也不用装，绝对好用。

msysgit是Windows版的Git，从https://git-for-windows.github.io下载，然后按默认选项安装即可。

安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！

安装完成后，还需要最后一步设置，在命令行输入：

$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。

注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。

――Git 创建版本库(repository)

选择一个合适的地方，创建一个空目录：
$ mkdir learngit
$ cd learngit
$ pwd

通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

ls -ah命令就可以看见隐藏的新建的.git目录（跟踪管理版本库，勿动！）

――Git 添加文件到版本库

版本控制系统，只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等
Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的
1.编写一个txt文件等，放到learngit目录下（子目录也行）
2.命令git add告诉Git，把文件添加到仓库：
$ git add *.txt
3.命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "instructions"
[master (root-commit) cb926e7] wrote a readme file
 1 file changed, 2 insertions(+)
 create mode 100644 *.txt

commit可以一次提交很多文件，所以你可以多次add不同的文件

git status命令掌握工作区的状态

如果git status告诉你有文件被修改过，git diff可以查看修改内容

git log命令显示从最近到最远的提交日志（英文状态下按Q退出）
如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
$ git log --pretty=oneline

――Git 文件回退

Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
要把当前版本回退到上一个版本，使用git reset命令：
$ git reset --hard HEAD^
看看*.txt的内容
$ cat *.txt

退回之后在想返回，只要上面的命令行窗口还没有被关掉，找到回退命令的commit id是3628164...，于是就可以指定回到未来的某个版本：版本号没必要写全，前几位就可以了，Git会自动去找。
若关掉窗口，找不到commit id，Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog

――Git 工作区&暂存区
工作区（Working Directory）
就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区

版本库（Repository）
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
现在，git commit就是往master分支上提交更改。

git checkout -- file可以丢弃工作区的修改：把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
$ git reset HEAD *.txt

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件（版本库存在的）：
通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：$ rm test.txt
因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了
两个选择：
一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
$ git rm test.txt
$ git commit -m "remove test.txt"

另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。